{
    "data": {
        "blogposts": [
            {
                "id": "ckadrcx4g00pw01525c5d2e56",
                "title": "Creating a learning platform with Next.js 13 app router",
                "slug": "creating-learning-platform-nextjs-13-app-router",
                "coverImage": {
                    "altText": null,
                    "url": "https://media.graphassets.com/iky8yZ0eRFS69RV6GC2F"
                },
                "excerpt": "Based on the schema and content model we created in the previous part of this series, we will produce a Next.js site using Hygraph data.",
                "author": {
                    "name": "Bryan Robinson"
                },
                "content": {
                    "markdown": "A content model is nothing until it has content and a frontend. In the last part of this series, we explored a basic schema and content model for a learning platform with Hygraph. In this article, we’ll take that schema and produce a Next.js site using data from Hygraph.\n\nSeries:\n\n-   [Creating a learning platform schema](https://hygraph.com/blog/building-learning-platform-schema \"https://hygraph.com/blog/building-learning-platform-schema\")\n\n## Requirements\n\nThis project uses Next.js 13 and the new App router. This will give us the most flexibility to extend the project in future installments using React Server Components to handle authentication and interactivity. A basic understanding of React and Next.js will help you through this article. If you didn't follow through the content model article, you can clone [the Hygraph project here](https://app.hygraph.com/clone/fb3992dcf3bd4d909a942a48c2786705?name=Learning%20Platform \"https://app.hygraph.com/clone/fb3992dcf3bd4d909a942a48c2786705?name=Learning%20Platform\") to get started with this article.\n\n## Project setup\n\nTo start, we need to initialize a new Next.js 13 project. Open up your terminal and navigate to where you want your project, then run the following command:\n\n    npx create-next-app learning-platform\n\nThe interactive setup will ask you questions to configure your project. Initialize with the following answers:\n\n-   Typescript: No\n-   ESLint: Yes\n-   Tailwind CSS: Yes\n-   `src/` directory: No\n-   App Router: Yes\n-   Import alias: No\n\nOnce the options are chosen, the CLI will install all the necessary pieces to run your Next.js site.\n\nWe’re not entirely done with our setup yet, however. We need to adjust the default Tailwind styling that Next.js gives us from the installation.\n\nUpdate the global CSS rules in `app/globals.css` to remove the extra styling and leave the file with the following Tailwind imports:\n\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n\nThat’s all the initial setup we need for the Next.js project, but let’s set up our Hygraph project as well. We’ll start with the learning platform schema created in the [first article in this series](https://hygraph.com/blog/building-learning-platform-schema \"https://hygraph.com/blog/building-learning-platform-schema\"). To make it accessible to our Next.js project,mustd to open permissions on the [Content API](https://hygraph.com/docs/api-reference#content-api \"https://hygraph.com/docs/api-reference#content-api\").\n\nTo do this, navigate to your project’s settings and click on API Access. To start, let’s set the public content API to its default. This will give us access to all the content in our models to read into our project. From this same screen, grab the Content API endpoint URL.\n\nCreate a new file in the root of your project named `.env.local` and add the variable `HYGRAPH_ENDPOINT`. This will be where we add the endpoint we copied from Hygraph.\n\n    HYGRAPH_ENDPOINT=YOUR-URL-HERE\n\nFrom here, we can run the site and implement the frontend.\n\n    npm run dev\n\n## Setting up the homepage with a list of courses\n\nAfter the first article in this series, you should have a little content added to your Hygraph project. We’ll use that content to populate the homepage with a list of courses.\n\nIn Next.js 13’s App router structure, the homepage file is `page.jsx` directly in the `app` directory. The default file comes with a lot of Next.js promotional material; let’s eliminate all that and add a structure for displaying the courses.\n\n[Read the full post here](https://hygraph.com/blog/creating-learning-platform-nextjs-13-app-router \"https://hygraph.com/blog/creating-learning-platform-nextjs-13-app-router\").\n\n\n"
                }
            },
            {
                "id": "ckadrfuu000pe0148kels2b5e",
                "title": "Content federation: The next stage of composability",
                "slug": "content-federation-and-composable-architecture",
                "coverImage": {
                    "altText": null,
                    "url": "https://media.graphassets.com/yulNNlwYRxKzIzg0nuzv"
                },
                "excerpt": "Content federation makes transitioning to a composable architecture easier and provides a solid foundation for building a composable stack. Let's find out how.",
                "author": {
                    "name": "Jing Li"
                },
                "content": {
                    "markdown": "Adopting a composable architecture can lead forward-thinking businesses into the future and generate new opportunities for their business. Yet moving to a composable approach isn’t always straightforward, and there are many pitfalls to sidestep along the way.\n\nContent federation makes transitioning to a composable architecture easier and provides the solid foundation needed when building a composable stack.\n\n## The pitfalls of composability\n\n[Composability](https://hygraph.com/blog/composability \"https://hygraph.com/blog/composability\") refers to a software design approach that enables the arrangement, rearrangement, and removal of individual components using a no-code platform. This facilitates business agility by replacing cumbersome legacy applications and data silos with modular and interchangeable building blocks.\n\nEnterprises can use composable architecture to create their technology stacks from best-of-breed solutions. By adopting composable architecture and technologies, companies can pivot and adapt to take advantage of new business opportunities, achieve faster time to market, scale without being locked into a single vendor, and achieve numerous other benefits.\n\nHowever, while many businesses want to embrace composability and its benefits, they must overcome some pitfalls.\n\n\n\n![Screenshot 2023-06-27 at 9.40.13 AM.png](https://media.graphassets.com/resize=width:600,height:300/73dnu5VrTcq7U65q0oeD \"Screenshot 2023-06-27 at 9.40.13 AM.png\")\n\n### 1. Too many content and data assets are contained in multiple legacy systems\n\nOrganizations that have long relied on legacy systems to manage their marketing requirements may struggle to embrace composability because of the volume of content and data assets involved.\n\nYes, they can implement a headless CMS to begin publishing content to multiple channels or a new eCommerce system to start embracing headless commerce. However, they might still have content stored in two other CMSs, a customer data platform, and other tools, which can’t be replaced just yet.\n\n### 2. The costs associated with migrating everything\n\nComposability opens the possibility of modernizing the entire technology stack with best-of-breed solutions. However, migrating to new platforms means purchasing new licenses and service level agreements (SLAs) for the latest software while simultaneously paying for the old ones for a few months longer. Plus, hiring agencies or third-party consultants to assist with the migration process.\n\n### 3. Tool fragmentation\n\nAnother pitfall of composability is the consequent tool fragmentation. Marketers and developers may have to toggle between different systems to find the information they need, which can decrease productivity and delay campaigns.\n\n### 4. Lack of knowledgeable staff and additional resources\n\nOrganizations moving from traditional content management systems and eCommerce platforms might find difficulty in embracing software built on headless architecture. For engineering and content teams in particular, the prospect of having to deal with the learning curve, training costs, and hiring requirements can make adopting a composable approach complex.\n\n### 5. Collaboration and communication issues\n\nWhen businesses break up their monolithic suites into smaller microservices-based tools to embrace composability, they must adjust how they work and collaborate internally, with outside partners, and with customers. While composability can solve the issue of silos in the long run, in the initial stages, some communication challenges might appear.\n\nThese challenges and potential pitfalls slow down and often discourage companies from building composable businesses; however, through content federation, they can solve them and realize the full benefits of composability.\n\n## What is content federation?\n\n[Content federation](https://hygraph.com/blog/introducing-content-federation \"https://hygraph.com/blog/introducing-content-federation\") gives businesses the ability to pull data together from multiple sources and backends via API into a single repository. This can be done without migrating the content or having multiple versions.\n\nContent federation provides access to up-to-date data across multiple systems. That data is then aggregated via a single API that serves as the source of truth and delivers the data to one or more frontends. Changes made to external data sources are updated and reflected in other systems. As a result, data integrity can be preserved and the most current information is always available.\n\n### Federated content platform vs headless CMS\n\nContent management is elevated to the next level through content federation by [going beyond what the headless CMS offers](https://hygraph.com/blog/federated-content-platform-vs-headless-cms \"https://hygraph.com/blog/federated-content-platform-vs-headless-cms\"). The headless CMS is a critical component of any composable software stack and solves the initial challenges of traditional content management, by giving businesses the ability to deliver content to multiple digital touchpoints. It also enables other tools to be integrated via APIs.\n\nHowever, as businesses seek to embrace composability, the influx of tools that need to be integrated, disparate data sources, and other challenges of composability has meant that the headless CMS alone isn’t sufficient.\n\nOn the other hand, a [federated content platform like Hygraph](https://hygraph.com/ \"https://hygraph.com/\") uses content federation to unify the backend as well, making API integrations less complex and synchronizing data from multiple sources, which can help businesses avoid the pitfalls of composability.\n\n## How content federation solves the challenges of composable architecture\n\nContent federation via a federated content platform enables organizations who want to benefit from composability to solve the challenges of adopting composable architecture.\n\n\n\n### Unifies data into a single layer\n\nInstead of toggling between multiple legacy systems or disparate tools to find a specific content asset or data source, content federation unifies all data sources via a single API. This single source of truth centralizes data and can be accessed in one location, such as a federated content platform like Hygraph, improving the productivity and efficiency of the entire organization.\n\n### Removes the need for and costs associated with immediate migration\n\nThe [cost of migration](https://hygraph.com/resources/cms-migration-guide \"https://hygraph.com/resources/cms-migration-guide\") isn’t restricted to only the licensing costs of a new content platform and the migration project. However, businesses can lower the need to migrate everything immediately through content federation. Data can be pulled from legacy content sources, which allows businesses to slow down the migration process and not be forced into retiring their previous content management system before they’re truly ready.\n\nFor instance, when Norwegian multinational telecommunications company Telenor needed to upgrade its tech stack to scale its video streaming service [they turned to Hygraph](https://hygraph.com/case-studies/telenor-case-study \"https://hygraph.com/case-studies/telenor-case-study\"). The ability to pull metadata from multiple sources, centralize it for easier editing, and achieve flexible content modeling along with an intuitive interface was unmatched. It also allows them to get on the road to composability.\n\n### Allows for a staggered approach to composability\n\nContent federation enables enterprises to stagger their composable business endeavors. They can start with a federated content platform like Hygraph that allows them to integrate other solutions much more quickly than a typical headless CMS.\n\nHygraph eliminates the necessity for another experience composition solution to manage the orchestration layer required for composability and future-proofs businesses as new requirements emerge. Companies can integrate new solutions when they’re financially and strategically ready rather than attempting to migrate to an entirely new technology stack in just a few months.\n\n### Reduces TCO and improves ROI of technology stack\n\nA federated content platform can reduce the [total cost of ownership](https://hygraph.com/blog/content-management-system-cost \"https://hygraph.com/blog/content-management-system-cost\") and improve the return on investment when building a technology stack. Fewer tools are required to maximize the benefits of composability, less maintenance and upgrades are necessary, and less tool fragmentation occurs. Content federation can also speed up the time to market as engineering and content teams increase their efficiency, allowing them to launch campaigns faster, generate more revenue, and improve ROI.\n\n### Streamlines 3rd party API access\n\nData can move seamlessly across various sources through content federation, including third-party APIs such as public databases. Rather than relying on manual data migration or webhooks to fetch information, content federation provides a more flexible and precise flow of data. Hygraph, for instance, can [federate content from multiple APIs](https://hygraph.com/blog/federate-remote-data-sources-into-graphql-apis \"https://hygraph.com/blog/federate-remote-data-sources-into-graphql-apis\"), regardless of whether they are GraphQL or RESTful, and consolidate them into a single endpoint via “GraphQLify.”\n\n## Wrapping up\n\nContent federation enables a staggered approach to composability, reducing costs and improving ROI. It streamlines third-party API access and accelerates time to market. With content federation and platforms like Hygraph, businesses can successfully embrace composability and unlock their full potential for future success. [Request a demo](https://hygraph.com/contact \"https://hygraph.com/contact\") and see how Hygraph can help you transform your digital projects.\n"
                }
            },
            {
                "id": "clmoosj1iavsr0a13hitlbg6o",
                "title": "Selamat datang ",
                "slug": "welcome",
                "coverImage": {
                    "altText": null,
                    "url": "https://media.graphassets.com/6Jv3oYeBQmyiH3JgT8KU"
                },
                "excerpt": "\n\n\n\nHaii selamat datang di blog saya. Mari belajar fisika bareng yuk :)",
                "author": {
                    "name": "Riza Andriani"
                },
                "content": {
                    "markdown": "# Selamat Datang di Belajar Fisika: Menjelajahi Dunia Fenomena Alam\n\n\n\nSelamat datang di blog kami yang akan membawa Anda dalam perjalanan menarik ke dalam dunia fisika! Apakah Anda seorang siswa yang sedang memulai pelajaran fisika di sekolah atau seorang pecinta ilmu pengetahuan yang ingin lebih memahami cara kerja alam semesta, blog ini adalah tempat yang sempurna untuk Anda.\n\n## Mengapa Belajar Fisika?\n\nFisika adalah cabang ilmu pengetahuan yang memungkinkan kita untuk memahami fenomena alam dan menjelaskan bagaimana segala sesuatu di sekitar kita berfungsi. Dari gerak planet di tata surya hingga medan gravitasi yang memengaruhi setiap objek, fisika adalah kunci untuk mengungkap misteri di sekitar kita.\n\n### Apa yang Akan Anda Temukan di Sini?\n\n1\\. \\*\\*Dasar Fisika\\*\\*: Kami akan memulai dengan dasar-dasar fisika, termasuk konsep-konsep seperti gerak, energi, dan listrik. Ini adalah fondasi yang penting untuk pemahaman yang lebih mendalam.\n\n2\\. \\*\\*Eksperimen dan Demonstrasi\\*\\*: Kami akan melakukan eksperimen dan demonstrasi sederhana untuk mengilustrasikan konsep-konsep fisika yang penting. Ini akan membantu Anda melihat bagaimana teori fisika diterapkan dalam praktiknya.\n\n3\\. \\*\\*Artikel Ilmiah\\*\\*: Kami akan merinci beberapa artikel ilmiah terkini dan penelitian terbaru dalam dunia fisika. Ini akan membantu Anda mengikuti perkembangan terbaru di bidang ini.\n\n4\\. \\*\\*Tantangan dan Latihan\\*\\*: Kami akan memberikan tantangan fisika dan latihan soal untuk menguji pemahaman Anda. Ini adalah cara yang bagus untuk mengasah keterampilan Anda.\n\n5\\. \\*\\*Berbagi Pengetahuan\\*\\*: Kami sangat mengundang partisipasi Anda. Silakan berikan pertanyaan, komentar, atau bahkan ide topik yang ingin Anda lihat di blog ini. Kami senang berbagi pengetahuan dengan Anda!\n\n## Jelajahi dan Pelajari\n\nMari kita bersama-sama menjelajahi dan memahami dunia fisika yang menakjubkan ini. Mari belajar bersama-sama, menemukan jawaban untuk pertanyaan kita, dan memperdalam apresiasi kita terhadap alam semesta yang luar biasa ini.\n\nJangan ragu untuk terlibat dalam diskusi, bertanya, dan berbagi ide. Terima kasih telah bergabung dengan kami di blog Belajar Fisika ini! Kami berharap Anda akan menikmati perjalanan ini.\n\n\n\nSalam Fisika!\n\n\n"
                }
            }
        ]
    },
    "extensions": {
        "Complexity-Cost-Left": 49999999982,
        "Effective-Complexity-Limit": 50000000000
    }
}